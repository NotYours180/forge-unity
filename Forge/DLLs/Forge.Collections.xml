<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Forge.Collections</name>
    </assembly>
    <members>
        <member name="T:Forge.Collections.Bag`1">
            <summary>
            An unordered collection of items.
            </summary>
        </member>
        <member name="F:Forge.Collections.Bag`1._items">
            <summary>
            The items that are stored inside of this bag.
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.#ctor">
            <summary>
            Construct a new bag.
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.#ctor(System.Int32)">
            <summary>
            Construct a new bag with the given initial capacity.
            </summary>
            <param name="capacity">How many items the bag can store without reallocating internal
            data structures.</param>
        </member>
        <member name="M:Forge.Collections.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Construct a new bag containing all of the elements inside of the given collection.
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Construct a new bag containing all of the elements inside of the given list.
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.CopyFrom(Forge.Collections.Bag{`0})">
            <summary>
            Copies from the given bag into this one.
            </summary>
            <param name="bag">The bag to copy from</param>
        </member>
        <member name="M:Forge.Collections.Bag`1.Copy">
            <summary>
            Creates a duplicate of this bag that has a different backing array.
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.IndexOf(`0)">
            <summary>
            Returns the index of the given item in the bag, or -1 if it is not found.
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.Remove(System.Int32)">
            <summary>
            Removes the item at given index from the bag in O(1) time. This operation does not
            maintain the order of elements inside of the bag!
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.Clear">
            <summary>
            Clears all stored items from this instance.
            </summary>
        </member>
        <member name="M:Forge.Collections.Bag`1.Remove(`0)">
            <summary>
            Remove the item from the bag. This is O(n) and has to scan the bag to find the item.
            </summary>
            <returns>True if the item was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Forge.Collections.Bag`1.Contains(`0)">
            <summary>
            Returns true if the Bag contains an instance of the given item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>True if it is in the bag, false otherwise.</returns>
        </member>
        <member name="T:Forge.Collections.BufferedItem`1">
            <summary>
            A set of items where only one is active and used.
            </summary>
            <typeparam name="T">The type of item stored.</typeparam>
        </member>
        <member name="F:Forge.Collections.BufferedItem`1.Items">
            <summary>
            The stored items
            </summary>
        </member>
        <member name="F:Forge.Collections.BufferedItem`1.CurrentIndex">
            <summary>
            The _currentKeyboardState item that we are accessing
            </summary>
        </member>
        <member name="M:Forge.Collections.BufferedItem`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.BufferedItem`1"/> class.
            </summary>
            <param name="count">The number of instances to allocate</param>
        </member>
        <member name="M:Forge.Collections.BufferedItem`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.BufferedItem`1"/> class.
            </summary>
            <param name="instances">The instances to swap between.</param>
        </member>
        <member name="M:Forge.Collections.BufferedItem`1.Swap">
            <summary>
            Swaps out the _currentKeyboardState item for the next one.
            </summary>
            <returns>The item that was deactivated</returns>
        </member>
        <member name="M:Forge.Collections.BufferedItem`1.Get">
            <summary>
            Gets the currently active item.
            </summary>
        </member>
        <member name="M:Forge.Collections.BufferedItem`1.Get(System.Int32)">
            <summary>
            Returns an item in the rotation queue that is relative to the current item by the given
            offset.
            </summary>
            <param name="relativeOffset">How far away from the current item</param>
            <returns></returns>
        </member>
        <member name="T:Forge.Collections.ConcurrentWriterBag`1">
            <summary>
            Provides a queue where pushing is assumed to be done concurrently, but reading is done in a
            single-thread where no writing is done.
            </summary>
            <typeparam name="T">The type of object stored.</typeparam>
        </member>
        <member name="F:Forge.Collections.ConcurrentWriterBag`1._allCollections">
            <summary>
            All thread-local bags; this is used when iterating over the entire contents of the bag.
            </summary>
        </member>
        <member name="F:Forge.Collections.ConcurrentWriterBag`1._localCollection">
            <summary>
            The thread-local bag that is used for appending items.
            </summary>
        </member>
        <member name="F:Forge.Collections.ConcurrentWriterBag`1._canWrite">
            <summary>
            Used to set the value of CanWrite.
            </summary>
        </member>
        <member name="M:Forge.Collections.ConcurrentWriterBag`1.#ctor">
            <summary>
            Construct a new concurrent writer bag.
            </summary>
        </member>
        <member name="M:Forge.Collections.ConcurrentWriterBag`1.Add(`0)">
            <summary>
            Adds the item in the collection.
            </summary>
            <remarks>
            This is a thread-safe function.
            </remarks>
            <param name="item">The item to enqueue</param>
        </member>
        <member name="M:Forge.Collections.ConcurrentWriterBag`1.ToList">
            <summary>
            Returns all items inside of the bag as a list. This method is not thread safe. This
            method does *not* clear the collection.
            </summary>
        </member>
        <member name="M:Forge.Collections.ConcurrentWriterBag`1.IterateAndClear(System.Action{`0})">
            <summary>
            Calls the iterator over every item in the bag and then clears the bags that were
            iterated.
            </summary>
            <remarks>
            This method is **NOT** thread-safe; do NOT call Add while iterating the items.
            </remarks>
            <param name="iterator">The function to invoke on the items.</param>
        </member>
        <member name="P:Forge.Collections.ConcurrentWriterBag`1.CanWrite">
            <summary>
            Gets/sets if writing is enabled or disabled. Thread-safe. Provides debug diagnostics
            only and is not critical for correct behavior. This is set to false by the methods which
            read collections as they are doing their reading.
            </summary>
        </member>
        <member name="T:Forge.Collections.IQuadTreeMonitor`1">
            <summary>
            Interface for objects which are monitoring a specific region within a QuadTree.
            </summary>
        </member>
        <member name="M:Forge.Collections.IQuadTreeMonitor`1.OnEnter(`0)">
            <summary>
            Called when the given item has entered the region.
            </summary>
        </member>
        <member name="M:Forge.Collections.IQuadTreeMonitor`1.OnExit(`0)">
            <summary>
            Called when an item has left the region.
            </summary>
        </member>
        <member name="M:Forge.Collections.Rect.Colliding(Forge.Collections.Rect)">
            <summary>
            Returns true if this rect is either intersecting with or fully contains the parameter
            rect.
            </summary>
        </member>
        <member name="M:Forge.Collections.Rect.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if v is between [min, max).
            </summary>
        </member>
        <member name="F:Forge.Collections.Node`1._items">
            <summary>
            The items that the node contains
            </summary>
        </member>
        <member name="F:Forge.Collections.Node`1._monitors">
            <summary>
            The monitors that watch for adds/removes in this node
            </summary>
        </member>
        <member name="M:Forge.Collections.Node`1.CollectInto(Forge.Utilities.Bound,System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all of the items inside of this node that are contained within the given region to
            the given collection.
            </summary>
            <param name="region">The area to collect objects from.</param>
            <param name="storage">Where to store the collected objects.</param>
        </member>
        <member name="P:Forge.Collections.Node`1.Items">
            <summary>
            Returns all of the items that are stored in this node.
            </summary>
        </member>
        <member name="P:Forge.Collections.Node`1.Monitors">
            <summary>
            Returns all of the monitors that are stored in this node.
            </summary>
        </member>
        <member name="P:Forge.Collections.Node`1.MonitoredRegion">
            <summary>
            The area that this node is monitoring
            </summary>
        </member>
        <member name="T:Forge.Collections.QuadTree`1">
            <summary>
            Implements a QuadTree, which supports spatial monitoring and spatial querying of
            positionable objects. The objects can be positioned anywhere, even at negative coordinates.
            </summary>
            <remarks>
            In regards to implementation details, this is not currently a recursive QuadTree. Instead,
            the world is divided into a set of chunks which can be queried directly. The size of these
            chunks can be controlled by the constructor parameter.
            </remarks>
            <typeparam name="T">The type of object stored in the QuadTree</typeparam>
        </member>
        <member name="F:Forge.Collections.QuadTree`1._worldScale">
            <summary>
            The width/height of each chunk
            </summary>
        </member>
        <member name="F:Forge.Collections.QuadTree`1._chunks">
            <summary>
            All of the chunks
            </summary>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.#ctor(System.Int32)">
            <summary>
            Constructs a new QuadTree that is empty.
            </summary>
            <param name="worldScale">The size of each node inside of the tree. A larger value will
            result in faster queries over large areas, but a smaller value will result in faster
            queries over a smaller area. In general, this should be close to your typical query
            size.</param>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.AddItem(`0,Forge.Utilities.Vector2r)">
            <summary>
            Add a new item to the QuadTree at the given position.
            </summary>
            <param name="item">The item to add.</param>
            <param name="position">The position of the item.</param>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.UpdateItem(`0,Forge.Utilities.Vector2r,Forge.Utilities.Vector2r)">
            <summary>
            Update the position of an item. This will notify monitors of position updates.
            </summary>
            <param name="item">The item to update the position of.</param>
            <param name="previous">The old position of the item.</param>
            <param name="current">The updated position of the item.</param>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.RemoveItem(`0,Forge.Utilities.Vector2r)">
            <summary>
            Remove an item from the QuadTree.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="position">The position of the item.</param>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.CollectItems``1(Forge.Utilities.Bound,``0)">
            <summary>
            Collect all items that are stored inside of the given region.
            </summary>
            <param name="region">The area to collect entities from.</param>
            <param name="storage">Where to store the collected entities.</param>
            <typeparam name="TCollection">The type of collection to store items in.</typeparam>
            <returns>All entities that are contained in or intersecting with the given
            region.</returns>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.AddMonitor(Forge.Collections.IQuadTreeMonitor{`0},Forge.Utilities.Bound)">
            <summary>
            Inserts the given monitor into the QuadTree. The monitor will be notified of any
            entities that enter or leave it. The monitor can be updated or removed.
            </summary>
            <param name="monitor">The monitor.</param>
            <param name="monitoredRegion">The area that the monitor is viewing.</param>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.RemoveMonitor(Forge.Collections.IQuadTreeMonitor{`0},Forge.Utilities.Bound)">
            <summary>
            Removes the given monitor from the quad tree. It will receive a series of OnExit calls
            during this Remove call.
            </summary>
            <param name="monitor">The monitor to remove.</param>
            <param name="monitoredRegion">The region that the monitor was monitoring.</param>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.UpdateMonitor(Forge.Collections.IQuadTreeMonitor{`0},Forge.Utilities.Bound,Forge.Utilities.Bound)">
            <summary>
            Update the position of a monitor.
            </summary>
            <param name="monitor">The monitor whose position has changed.</param>
            <param name="previousRegion">The previous area that the monitor was watching.</param>
            <param name="currentRegion">The new area that the monitor is watching.</param>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.IterateChunks(Forge.Utilities.Bound,System.Action{Forge.Collections.Node{`0}})">
            <summary>
            Helper function to iterate all of the chunks that are contained within the given world
            region.
            </summary>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.IterateChunks(Forge.Collections.Rect,System.Action{Forge.Collections.Node{`0}})">
            <summary>
            Helper function to iterate all of the chunks that are contained within the given world
            region.
            </summary>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.GetChunk(System.Int32,System.Int32)">
            <summary>
            Returns the chunk located at the given x and z world coordinates.
            </summary>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.GenerateChunk(System.Int32,System.Int32)">
            <summary>
            Creates a new chunk located at the given x and z index coordinates.
            </summary>
        </member>
        <member name="M:Forge.Collections.QuadTree`1.GrowArray``1(``0[0:,0:],System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>
            Helper method that grows a 2D array and populates new elements with values created from
            the generator.
            </summary>
        </member>
        <member name="P:Forge.Collections.QuadTree`1.Monitors">
            <summary>
            Returns all monitors that are stored in the tree.
            </summary>
        </member>
        <member name="P:Forge.Collections.QuadTree`1.Items">
            <summary>
            Returns all items that are stored in the tree.
            </summary>
        </member>
        <member name="T:Forge.Collections.SparseArray`1">
            <summary>
            Stores a list of items where the are gaps between items; not every index in the array
            contains an element.
            </summary>
        </member>
        <member name="F:Forge.Collections.SparseArray`1._items">
            <summary>
            The internal array of elements inside of the array.
            </summary>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.#ctor">
            <summary>
            Creates a new SparseArray with the default capacity.
            </summary>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.#ctor(System.Int32)">
            <summary>
            Creates a new SparseArray with the given capacity.
            </summary>
            <param name="capacity">The capacity to initialize with</param>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,`0}})">
            <summary>
            Creates a new sparse array from the given enumerator.
            </summary>
            <param name="enumerator">The items to allocate the array from.</param>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.Clear">
            <summary>
            Clears out all elements inside of the SparseArray.
            </summary>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.Remove(System.Int32)">
            <summary>
            Removes the element at the given index.
            </summary>
            <param name="index">The index of the element to remove</param>
            <returns>If an element was removed</returns>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.ContainsKey(System.Int32)">
            <summary>
            Checks to see if there is an element at the given index.
            </summary>
            <param name="index">The index to check.</param>
            <returns>True if there is a contained element, false otherwise.</returns>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            <paramref name="value" />parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements
            <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the
            specified key; otherwise, false.</returns>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.EnsureIndex(System.Int32)">
            <summary>
            Ensures that index is a valid index into the Elements array.
            </summary>
            <param name="index">The index to verify.</param>
        </member>
        <member name="M:Forge.Collections.SparseArray`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:Forge.Collections.SparseArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the given index.
            </summary>
            <param name="index">The index to set</param>
            <returns>If getting, then the value at the given index.</returns>
        </member>
        <member name="T:Forge.Collections.SwappableItem`1">
            <summary>
            Contains two items which can be swapped between a Previous and a Current state.
            </summary>
            <typeparam name="T">The type of item stored</typeparam>
        </member>
        <member name="F:Forge.Collections.SwappableItem`1._a">
            <summary>
            The first item
            </summary>
        </member>
        <member name="F:Forge.Collections.SwappableItem`1._b">
            <summary>
            The second item
            </summary>
        </member>
        <member name="F:Forge.Collections.SwappableItem`1._current">
            <summary>
            The current item
            </summary>
        </member>
        <member name="M:Forge.Collections.SwappableItem`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Forge.Collections.SwappableItem`1"/> class.
            </summary>
            <param name="a">The first item.</param>
            <param name="b">The second item.</param>
        </member>
        <member name="M:Forge.Collections.SwappableItem`1.Swap">
            <summary>
            Swap the Current and Previous items.
            </summary>
        </member>
        <member name="P:Forge.Collections.SwappableItem`1.Current">
            <summary>
            The current item.
            </summary>
        </member>
        <member name="P:Forge.Collections.SwappableItem`1.Previous">
            <summary>
            The previous item.
            </summary>
        </member>
        <member name="T:Forge.Collections.UnorderedList`1">
            <summary>
            A list of items that is unordered. This provides O(1) addition, O(1) removal, and O(1)
            iteration. However, having all of these nice properties requires some metadata to be stored
            on each item, which means that Add takes a parameter of metadata for the stored item. Same
            with remove.
            </summary>
            <typeparam name="T">The type of item to store.</typeparam>
        </member>
        <member name="F:Forge.Collections.UnorderedList`1.Items">
            <summary>
            The stored list of items.
            </summary>
        </member>
        <member name="M:Forge.Collections.UnorderedList`1.#ctor(System.Int32)">
            <summary>
            Creates a new UnorderedList with the given capacity.
            </summary>
            <param name="capacity">The capacity to give to the list</param>
        </member>
        <member name="M:Forge.Collections.UnorderedList`1.Contains(`0,Forge.Collections.UnorderedListMetadata)">
            <summary>
            Checks to see if the given item is contained in the UnorderedList. This is O(1).
            </summary>
            <param name="item">The item to check</param>
            <param name="metadata">The item's metadata</param>
            <returns>True if the item is contained, false otherwise</returns>
        </member>
        <member name="M:Forge.Collections.UnorderedList`1.Remove(`0,Forge.Collections.UnorderedListMetadata)">
            <summary>
            Removes the stored item.
            </summary>
            <returns>True if the item was removed, false otherwise</returns>
        </member>
        <member name="M:Forge.Collections.UnorderedList`1.Add(`0,Forge.Collections.UnorderedListMetadata)">
            <summary>
            Adds an item to the list. The location of the item in the list is unspecified.
            </summary>
        </member>
        <member name="P:Forge.Collections.UnorderedList`1.Length">
            <summary>
            The number of stored objects in Items.
            </summary>
        </member>
        <member name="P:Forge.Collections.UnorderedList`1.Item(System.Int32)">
            <summary>
            Set or get the item at the specified index.
            </summary>
        </member>
        <member name="T:Forge.Collections.UnorderedList`1.StoredItem">
            <summary>
            Data stored inside of the UnorderedList.
            </summary>
        </member>
        <member name="T:Forge.Collections.WorldIndexCoordinateTransform">
            <summary>
            Contains some utility functions that translate between two coordinate systems, called world
            and index. The world coordinate system is larger than the index coordinate system, ie, every
            100 units in the world coordinate system maps to 1 unit in the index coordinate system.
            Further, the world coordinate system contains all 4 quadrants (+-x, +-z), but the index
            coordinate system only contains +x and +z.
            </summary>
        </member>
        <member name="M:Forge.Collections.WorldIndexCoordinateTransform.ConvertWorldToIndex(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts the given game coordinates (which can be negative) into coordinates on a
            smaller map with only positive coordinates.
            </summary>
            <param name="worldScale">The scale difference between the world map and the index map; a
            value of 100 here means that 100 units of the world map correspond to 1 unit the index
            map.</param>
            <param name="xWorld">The x coordinate on the world.</param>
            <param name="zWorld">The z coordinate on the world.</param>
            <param name="xIndex">The x coordinate on the index map.</param>
            <param name="zIndex">The z coordinate on the index map.</param>
        </member>
        <member name="M:Forge.Collections.WorldIndexCoordinateTransform.MapWorldToIndex(System.Int32,System.Int32)">
            <summary>
            Converts the given world coordinate into an index coordinate.
            </summary>
            <param name="worldScale">The scale difference between the world map and the index map; a
            value of 100 here means that 100 units of the world map correspond to 1 unit the index
            map.</param>
            <param name="world">The world coordinate (can be negative).</param>
            <returns>The index coordinate that is associated with the given world
            coordinate.</returns>
        </member>
        <member name="M:Forge.Collections.WorldIndexCoordinateTransform.ConvertIndexToWorld(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts the given index coordinates into the most closely associated world coordinates.
            </summary>
            <param name="worldScale">The scale difference between the world map and the index map; a
            value of 100 here means that 100 units of the world map correspond to 1 unit the index
            map.</param>
            <param name="xIndex">The x index coordinate.</param>
            <param name="zIndex">The z index coordinate.</param>
            <param name="xWorld">The x world coordinate.</param>
            <param name="zWorld">The z world coordinate.</param>
        </member>
        <member name="M:Forge.Collections.WorldIndexCoordinateTransform.MapIndexToWorld(System.Int32,System.Int32)">
            <summary>
            Converts the given index coordinate into its most closely associated world coordinate.
            </summary>
            <param name="worldScale">The scale difference between the world map and the index map; a
            value of 100 here means that 100 units of the world map correspond to 1 unit the index
            map.</param>
            <param name="index">The index coordinate (must be >= 0).</param>
            <returns>A world coordinate that will map back to the given index coordinate.</returns>
        </member>
    </members>
</doc>
